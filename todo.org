* DONE Write the command line prompt
** DONE make prompt configurable
** DONE Make it easier to call command from repl: call "help like this"
Split out the string in the call function, rather than in the prompt! function.
** DONE check arity when calling commands
** DONE make help work correctly (print the doc string)
** DONE Define a test case for the line parser
** DONE ignore empty command (regexp)
* DONE Set up Marginalia to work with project
** DONE Find a way to automatically push to gh-pages
** DONE Blog about it
* DONE Log in and set up api
** DONE Tidy up the xml parsing - use zipper?
** DONE prompt for api key on startup
*** DONE store the api key in home directory
** DONE Store the api key in home directory file
** DONE Write the get authorisation token method
*** DONE Test getting token when not authorised
Doesn't work - get a message "Did you authenticate"
*** DONE Now authorise the app and test again
this works
(def my-frob (request-authorization))
(rtm-auth-getToken my-frob)
*** DONE Now try restarting the app and getting a token - is the authorisation remembered? I think it should be.
The frob needs to be authorized, and then you can get the token. Seems
like that will be every time the app is run.
** DONE Parse the xml on the get token method
** DONE Write the check token method
** DONE Store the fact that the app has been authorized in state and, if so, don't bother opening the browser
Test this by revoking auth on web-app (currently revoked - make the
check token work first)
This doesn't work
** DONE Prompt for username and password - not needed?
Not needed
** DONE Authenticate against the rtm api
** DONE Throw an exception if api key etc not set? Catch at repl?
* DONE Display all lists
* DONE Status command - display the current status (logged in etc)
* DONE Command to pull back all tasks for a list
** DONE All tasks
** DONE Tasks for particular list
** DONE With filter
* DONE Write a list command which lists all the lists from the prompt
** DONE Keep a store of the last response for referring back to
* DONE Add arg which displays all tasks in a list
In progress. Need to work out how to display the tasks. Will be same
as lists basically.
* DONE Need to fix the login process
When I started up the app on my laptop, it prompted for the shared
secret etc, redirected to the browser, but then displayed login
failed. So something isn't working when it comes to retrieving the
token. Now seems like a good time to fix that!
* DONE Investigate whether can look up functions using ns
Yes!! (def dl ('display-lists (ns-map 'rtm-clj.core)))
** DONE Move all commands into a separate namespace and look them up dynamically
Add meta :rtm-aliases ["list" "ls" "l"]
** DONE Make sure aliases don't clash
** DONE Make the first in the alias list the primary - used for help
** DONE Make sure arity checks still work
** DONE Display the aliases in help also
* DONE Number shortcut - remember the context and call the function with the number
Store as last, change the key to be the function name? 
* DONE Provide a command to view a task
** DONE Hook into index command
** DONE Add the api call to retrieve the command based on the id
** DONE Display the task data once retrieved from api
* DONE Provide a way to create a task
** DONE Add api support for time line
** DONE Request a timeline on login
** DONE Support the shortcuts that the web app supports?
^today !1 etc - just set parse to 1
* DONE Remove all state from the api namespace
** DONE Convert the separate states into a map
** DONE Always pass it into the functions
** DONE Move the helper state stuff up into core
** DONE Make all api calls pure functions
** DONE Fix the arity issue (because now expects state - complicates the arity check)
** DONE Simplify api layer - no transformation. One to one mapping to rtm api. Just return the raw response.
* DONE Re-organise the namespaces to core, xml, command, api
* DONE Indexify - use zip map??
* DONE In command ns, scope to tidy up xml parsing calls
  Make the parse calls multi-methods, and convert to xml within the xml ns
* DONE Simplify display-and-cache
* DONE Re-work the xml stuff - really need to get my head around zippers!
* DONE Provide a way to delete a task
* DONE Add undo support for last action, using the timeline
** DONE Keep a stack of the actions to undo - one timeline for the lifetime of the app
** DONE Add a "undo" command which shows a history of all actions and whether they are undoable
** DONE Add undo which takes a number - prompt to confirm
* TODO Provide a way to mark a task as complete
c 1 2 3
Marks tasks 1, 2, and 3 as complete
Add a "Marking as complete - are you sure" prompt
* TODO Create a list
* TODO Delete a list
* TODO Command to move a task to another list
** TODO Need to provide move by name, as well as by id
* TODO Make to do list self hosting in RTM
* TODO Change priority on a task
* TODO Ability to sort a list by priority, due date
* TODO Add a note to a task
* TODO Rename a task
* TODO Change due date on a task
* TODO Command to view all tags
* TODO Command to list all tasks by tag
* TODO Search command
* TODO Write a high level set of tasks that help me do my weekly RTM process
* TODO Tune the code as a learning exercise. Make as concise, elegant as possible


* TODO Update the README
* TODO Decide whether or not to do any more..

* Maybe
** TODO Up key should cycle through history?
Not sure how that would work with read-line. Might need to read char instead...
** TODO Split the command line engine into separate, re-usable project.
** TODO Incorporate into macro??
** TODO For example, once have a way to search can save that as an alias
** TODO Make the prompt more general - pass in a validation function which is run immediately?
** TODO Provide a command to change the prompt
** TODO Make the api reusable for other people
** TODO Don't have it just print error. Throw exceptions etc.
** TODO Remove all println from the api part
** TODO Remove the dependency on the monolithic clojure contrib, if possible
   http://dev.clojure.org/display/doc/Clojure+Contrib
   
