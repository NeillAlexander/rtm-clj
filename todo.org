* Remember the Milk Command Line Tool
This is going to be a very simple RTM command line tool. There is no
point trying to reproduce all the functionality. It's a learning tool
after all. So define the set of tasks that you want to be able to do
and build the api to service it.
* DONE Write the command line prompt
** DONE make prompt configurable
** DONE Make it easier to call command from repl: call "help like this"
Split out the string in the call function, rather than in the prompt! function
** DONE check arity when calling commands
** DONE make help work correctly (print the doc string)
** DONE Define a test case for the line parser
** DONE ignore empty command (regexp)
* DONE Set up Marginalia to work with project
** DONE Find a way to automatically push to gh-pages
** DONE Blog about it
* DONE Log in and set up api
** DONE Tidy up the xml parsing - use zipper?
** DONE prompt for api key on startup
*** DONE store the api key in home directory
** DONE Store the api key in home directory file
** DONE Write the get authorisation token method
*** DONE Test getting token when not authorised
Doesn't work - get a message "Did you authenticate"
*** DONE Now authorise the app and test again
this works
(def my-frob (request-authorization))
(rtm-auth-getToken my-frob)
*** DONE Now try restarting the app and getting a token - is the authorisation remembered? I think it should be.
The frob needs to be authorized, and then you can get the token. Seems
like that will be every time the app is run.
** DONE Parse the xml on the get token method
** DONE Write the check token method
** DONE Store the fact that the app has been authorized in state and, if so, don't bother opening the browser
Test this by revoking auth on web-app (currently revoked - make the
check token work first)
This doesn't work
** DONE Prompt for username and password - not needed?
Not needed
** DONE Authenticate against the rtm api
** DONE Throw an exception if api key etc not set? Catch at repl?
* DONE Display all lists
* DONE Status command - display the current status (logged in etc)
* DONE Command to pull back all tasks for a list
** DONE All tasks
** DONE Tasks for particular list
** DONE With filter
* DONE Write a list command which lists all the lists from the prompt
** DONE Keep a store of the last response for referring back to
* DONE Add arg which displays all tasks in a list
In progress. Need to work out how to display the tasks. Will be same
as lists basically.
* TODO Investigate whether can look up functions using ns
Yes!! (def dl ('display-lists (ns-map 'rtm-clj.core)))
** TODO Move all commands into a separate namespace and look them up dynamically
Add meta :rtm-aliases ["list" "ls" "l"]
** TODO Make sure aliases don't clash
** TODO Make sure arity checks still work
* TODO Provide a way to mark a task as complete
* TODO Provide a way to delete a task
* TODO Provide a way to create a task
* TODO Provide a command to view notes for a task
* TODO Command to view all tags
* TODO Command to list all tasks by tag
* TODO Search command
* TODO Write a high level set of tasks that help me do my weekly RTM process
* TODO Tune the code as a learning exercise. Make as concise, elegant as possible
* Maybes
** TODO Incorporate into macro??
** TODO For example, once have a way to search can save that as an alias
** TODO Make the prompt more general - pass in a validation function which is run immediately?
** TODO Provide a command to change the prompt
** TODO Make the api reusable for other people
** TODO Don't have it just print error. Throw exceptions etc.
** TODO Remove all println from the api part
** TODO Remove the dependency on the monolithic clojure contrib, if possible
   http://dev.clojure.org/display/doc/Clojure+Contrib
   
